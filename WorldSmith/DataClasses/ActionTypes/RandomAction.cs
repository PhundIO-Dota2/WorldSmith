/*****************************  NOTICE  ********************************************
* This file was autogenerated.  Do not edit.                                       *
* Instead, modify the schema in DataSchema related to this class and regenerate it *
***********************************************************************************/
using System;
using System.ComponentModel;
using WorldSmith.Panels;
using WorldSmith.Dialogs;
using KVLib;

namespace WorldSmith.DataClasses
{
	[DotaAction]
	[EditorGrammar("With a %Chance percent chance of happening using pseudo random %PseudoRandom , do %OnSuccess on success and %OnFailure on failure.")]
	public partial class RandomAction : BaseAction
	{
		public RandomAction(KeyValue kv)
			: base(kv)
		{
		}
		public RandomAction(string className)
			: base(className)
		{
		}
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(NumberValue), ".5")]
		public NumberValue Chance
		{
			get
			{
				KeyValue kv = GetSubkey("Chance");
				return (kv == null ? new NumberValue("Chance") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("Chance");
				if(kv == null)
				{
					kv = new KeyValue("Chance");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		public enum PseudoRandomEnum
		{
			DOTA_PSEUDO_RANDOM_BREWMASTER_CRIT,
			DOTA_PSEUDO_RANDOM_CHAOS_CRIT,
			DOTA_PSEUDO_RANDOM_FACELESS_BASH,
			DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL,
			DOTA_PSEUDO_RANDOM_ITEM_BASHER,
			DOTA_PSEUDO_RANDOM_ITEM_BUTTERFLY,
			DOTA_PSEUDO_RANDOM_ITEM_GREATERCRIT,
			DOTA_PSEUDO_RANDOM_ITEM_HALBRED_MAIM,
			DOTA_PSEUDO_RANDOM_ITEM_LESSERCRIT,
			DOTA_PSEUDO_RANDOM_ITEM_MAELSTROM,
			DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR,
			DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR_STATIC,
			DOTA_PSEUDO_RANDOM_ITEM_MKB,
			DOTA_PSEUDO_RANDOM_ITEM_PMS,
			DOTA_PSEUDO_RANDOM_ITEM_SANGE_MAIM,
			DOTA_PSEUDO_RANDOM_ITEM_SANGEYASHA_MAIM,
			DOTA_PSEUDO_RANDOM_ITEM_STOUT,
			DOTA_PSEUDO_RANDOM_ITEM_VANGUARD,
			DOTA_PSEUDO_RANDOM_JUGG_CRIT,
			DOTA_PSEUDO_RANDOM_LYCAN_CRIT,
			DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_CRIT,
			DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT,
			DOTA_PSEUDO_RANDOM_SLARDAR_BASH,
			DOTA_PSEUDO_RANDOM_SNIPER_HEADSHOT,
			DOTA_PSEUDO_RANDOM_TROLL_BASH,
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(PseudoRandomEnum.DOTA_PSEUDO_RANDOM_JUGG_CRIT)]
		public PseudoRandomEnum PseudoRandom
		{
			get
			{
				KeyValue kv = GetSubkey("PseudoRandom");
				return (kv == null ? PseudoRandomEnum.DOTA_PSEUDO_RANDOM_JUGG_CRIT : kv.GetEnum<PseudoRandomEnum>());
			}
			set
			{
				KeyValue kv = GetSubkey("PseudoRandom");
				if(kv == null)
				{
					kv = new KeyValue("PseudoRandom");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(null)]
		public DotaActionCollection OnSuccess
		{
			get
			{
				KeyValue kv = GetSubkey("OnSuccess");
                if (kv == null)
                {
                    var dac = new DotaActionCollection("OnSuccess");
                    this.KeyValue.AddChild(dac.KeyValue);
                    return dac;
                }
                return new DotaActionCollection(kv); 
			}
			set
			{
				KeyValue kv = GetSubkey("OnSuccess");
				if(kv == null)
				{
					kv = new KeyValue("OnSuccess");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(null)]
		public DotaActionCollection OnFailure
		{
			get
			{
				KeyValue kv = GetSubkey("OnFailure");
                if (kv == null)
                {
                    var dac = new DotaActionCollection("OnFailure");
                    this.KeyValue.AddChild(dac.KeyValue);
                    return dac;
                }
                return new DotaActionCollection(kv); 
			}
			set
			{
				KeyValue kv = GetSubkey("OnFailure");
				if(kv == null)
				{
					kv = new KeyValue("OnFailure");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

	}
}
