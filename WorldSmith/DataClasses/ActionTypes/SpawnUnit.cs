/*****************************  NOTICE  ********************************************
* This file was autogenerated.  Do not edit.                                       *
* Instead, modify the schema in DataSchema related to this class and regenerate it *
***********************************************************************************/
using System;
using System.ComponentModel;
using WorldSmith.Panels;
using WorldSmith.Dialogs;
using KVLib;

namespace WorldSmith.DataClasses
{
	[DotaAction]
	[EditorGrammar("Spawn %UnitCount %UnitName around %Target with a radius of %Radius units for %Duration seconds.  After spawn, execute %OnSpawn actions")]
	public partial class SpawnUnit : TargetedAction
	{
		public SpawnUnit(KeyValue kv)
			: base(kv)
		{
		}
		public SpawnUnit(string className)
			: base(className)
		{
		}
		[Category("Misc")]
		[Description("Name")]
		[DefaultValue("")]
		public string UnitName
		{
			get
			{
				KeyValue kv = GetSubkey("UnitName");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				KeyValue kv = GetSubkey("UnitName");
				if(kv == null)
				{
					kv = new KeyValue("UnitName");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("int")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue UnitCount
		{
			get
			{
				KeyValue kv = GetSubkey("UnitCount");
				return (kv == null ? new NumberValue("UnitCount") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("UnitCount");
				if(kv == null)
				{
					kv = new KeyValue("UnitCount");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("int")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue SpawnRadius
		{
			get
			{
				KeyValue kv = GetSubkey("SpawnRadius");
				return (kv == null ? new NumberValue("SpawnRadius") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("SpawnRadius");
				if(kv == null)
				{
					kv = new KeyValue("SpawnRadius");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("int")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue Duration
		{
			get
			{
				KeyValue kv = GetSubkey("Duration");
				return (kv == null ? new NumberValue("Duration") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("Duration");
				if(kv == null)
				{
					kv = new KeyValue("Duration");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("Name")]
		[DefaultValue(null)]
		public DotaActionCollection OnSpawn
		{
			get
			{
				KeyValue kv = GetSubkey("OnSpawn");
                if (kv == null)
                {
                    var dac = new DotaActionCollection("OnSpawn");
                    this.KeyValue.AddChild(dac.KeyValue);
                    return dac;
                }
                return new DotaActionCollection(kv); 
			}
			set
			{
				KeyValue kv = GetSubkey("OnSpawn");
				if(kv == null)
				{
					kv = new KeyValue("OnSpawn");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

	}
}
